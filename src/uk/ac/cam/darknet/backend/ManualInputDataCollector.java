package uk.ac.cam.darknet.backend;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import uk.ac.cam.darknet.common.Individual;
import uk.ac.cam.darknet.database.PrimaryDatabaseManager;
import uk.ac.cam.darknet.gui.PrimaryDataCollectorGUI;
import au.com.bytecode.opencsv.CSVReader;

/**
 * This class is a primary data collector with a graphical user interface
 * allowing manual data input. It represents the primary way of entering data
 * into the system. This collector supports reading comma-separated values (CSV)
 * files generated by booking systems.
 * 
 * @author Farah Patel
 */
public class ManualInputDataCollector extends PrimaryDataCollector {
	/**
	 * Create a new manual data collector with the specified database manager.
	 * 
	 * @param databaseManager The database manager to use to write to the
	 *            database.
	 * @param dataInput The file which has the input data.
	 */
	public ManualInputDataCollector(PrimaryDatabaseManager databaseManager) {
		super(databaseManager);
	}

	/**
	 * Loads Primary Data from CSV file into Database
	 * 
	 * @param pathname path to CSV file containing primary data, CSV file
	 *            expected to have the following format: Customer Id, First
	 *            Name, Last Name, Email Address, Event Name, Event Date/Time,
	 *            Seat, Price, Ticket Type, Date Confirmed, Sales Channel
	 * @return List of Individuals stored in Database
	 * @throws IOException If CSV file not found or if read is unsuccessful
	 * @throws SQLException
	 * @throws ParseException
	 */
	public static List<Individual> loadfromCSV(String pathname) throws IOException, SQLException, ParseException {
		final List<Individual> audience = new ArrayList<Individual>();
		final InputStream csvStream = new FileInputStream(new File(pathname));

		// Use Java 7 try-with-resource to properly close the reader
		try (CSVReader reader = new CSVReader(new InputStreamReader(csvStream));) {
			String[] nextLine;
			while ((nextLine = reader.readNext()) != null) {
				if (nextLine != null) {
					System.out.println(nextLine[5]);
					// TODO: This approach may fail when the first line is a header, there must be a check for this. (Augustin)
					// TODO: Replace the next 3 lines by this: final Date eventDate = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss").parse(nextLine[5]); (Augustin)
					String pattern = DateFormat.getDateInstance().format(nextLine[5]);
					DateFormat df = new SimpleDateFormat(pattern);
					Date eventDate = df.parse(nextLine[5]);
					Individual ind = Individual.getNewIndividual(nextLine[1], nextLine[2], nextLine[3], eventDate, nextLine[6], null);
					audience.add(ind);
				}
			}
			databaseManager.storeIndividual(audience);
			return audience;
		}
	}

	/**
	 * Loads an Individual from ManualInputGUI into Database
	 * 
	 * @param ind Individual to be stored
	 * @return Individual stored in Database
	 * @throws SQLException
	 */
	public static Individual loadIndividual(Individual ind) throws SQLException {
		databaseManager.storeIndividual(ind);
		// why does this throw exception but other doesnt?
		return ind;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		// note will create Individuals and store them using database manager
		PrimaryDataCollectorGUI gui = new PrimaryDataCollectorGUI();
		// how do I start this?
		// Call initialize() method (Augustin)
	}

	/**
	 * this method is for testing
	 * 
	 * @param args
	 * @throws IOException
	 * @throws SQLException
	 * @throws ParseException
	 */
	public static void main(String args[]) throws IOException, SQLException,
			ParseException {
		List<Individual> audience = loadfromCSV(args[0]);
		Individual i = audience.get(0);
		System.out.println();
	}
}
